From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mykyta Komarn <nkomarn@hotmail.com>
Date: Wed, 30 Sep 2020 18:17:51 -0700
Subject: [PATCH] Heavily optimize recipe lookups

Recipe lookups are now cached in CraftingManager. I also rewrote the stream replacement code to not create an ArrayList, rather just use the Collection that was already there. Additionally, an EMPTY_MAP variable was added to prevent bottlenecks during map creation, since that map is only ever iterated.

NonNullList now uses GlueList internally as its delegate list, which should bring general improvements to all tile entities with an inventory.

These changes knock off ~40ms of tick duration with a sample of ~7,700 running furnaces on a server.

diff --git a/src/main/java/net/minecraft/server/CraftingManager.java b/src/main/java/net/minecraft/server/CraftingManager.java
index de7d5ed8d6260ce5ee4164df29cdaf69f561045c..80b2df0d59925fe378476178c2aa39dfc0c88be9 100644
--- a/src/main/java/net/minecraft/server/CraftingManager.java
+++ b/src/main/java/net/minecraft/server/CraftingManager.java
@@ -25,6 +25,10 @@ public class CraftingManager extends ResourceDataJson {
     private static final Logger LOGGER = LogManager.getLogger();
     public Map<Recipes<?>, Object2ObjectLinkedOpenHashMap<MinecraftKey, IRecipe<?>>> recipes = ImmutableMap.of(); // CraftBukkit
     private boolean d;
+    // Yatopia start
+    public static final Object2ObjectLinkedOpenHashMap<MinecraftKey, IRecipe<?>> EMPTY_MAP = new Object2ObjectLinkedOpenHashMap<>();
+    public static final Map<Recipes<?>, List> CACHE = new Object2ObjectLinkedOpenHashMap<>();
+    // Yatopia end
 
     public CraftingManager() {
         super(CraftingManager.a, "recipes");
@@ -79,8 +83,8 @@ public class CraftingManager extends ResourceDataJson {
     public <C extends IInventory, T extends IRecipe<C>> Optional<T> craft(Recipes<T> recipes, C c0, World world) {
         // CraftBukkit start
         // Yatopia start - replace stream
-        List<IRecipe<C>> collection = new java.util.ArrayList<>(this.b(recipes).values());
-        Optional<T> recipe = collection.isEmpty() ? Optional.empty() : recipes.a(collection.get(0), world, c0);
+        Collection<IRecipe<C>> collection = this.b(recipes).values();
+        Optional<T> recipe = collection.isEmpty() ? Optional.empty() : recipes.a(collection.iterator().next(), world, c0);
         /*
         Optional<T> recipe = this.b(recipes).values().stream().flatMap((irecipe) -> {
             return SystemUtils.a(recipes.a(irecipe, world, c0));
@@ -108,19 +112,16 @@ public class CraftingManager extends ResourceDataJson {
     }
 
     public <C extends IInventory, T extends IRecipe<C>> List<T> a(Recipes<T> recipes) {
-        List<IRecipe<C>> list = new ArrayList<>();
-        for (IRecipe<C> irecipe : this.b(recipes).values()) {
-            IRecipe<C> ciRecipe = irecipe;
-            list.add(ciRecipe);
-        }
-        return (List) list;
+        return CACHE.computeIfAbsent(recipes, recipes1 -> {
+            return new net.yatopia.server.list.GlueList<>(this.b(recipes).values());
+        }); // Yatopia
     }
 
     public <C extends IInventory, T extends IRecipe<C>> List<T> b(Recipes<T> recipes, C c0, World world) {
         // Yatopia start - WHY?! WHO DID THIS TO YOU!?!
         Collection<IRecipe<C>> recipeCollection = this.b(recipes).values();
         if (recipeCollection.isEmpty()) return java.util.Collections.emptyList();
-        List<T> ret = new java.util.ArrayList<>();
+        List<T> ret = new net.yatopia.server.list.GlueList<>();
         for (IRecipe<C> iRecipe : recipeCollection) recipes.a(iRecipe, world, c0).ifPresent(ret::add);
         ret.sort(Comparator.comparing((iRecipe) -> iRecipe.getResult().getTranslationKey()));
         return ret;
@@ -134,7 +135,7 @@ public class CraftingManager extends ResourceDataJson {
     }
 
     private <C extends IInventory, T extends IRecipe<C>> Map<MinecraftKey, IRecipe<C>> b(Recipes<T> recipes) {
-        return (Map) this.recipes.getOrDefault(recipes, new Object2ObjectLinkedOpenHashMap<>()); // CraftBukkit
+        return (Map) this.recipes.getOrDefault(recipes, EMPTY_MAP); // CraftBukkit
     }
 
     public <C extends IInventory, T extends IRecipe<C>> NonNullList<ItemStack> c(Recipes<T> recipes, C c0, World world) {
diff --git a/src/main/java/net/minecraft/server/NonNullList.java b/src/main/java/net/minecraft/server/NonNullList.java
new file mode 100644
index 0000000000000000000000000000000000000000..25ff24a34a012f132d937726581ed2fb2cd0fde3
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NonNullList.java
@@ -0,0 +1,75 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import java.util.AbstractList;
+import java.util.Arrays;
+import java.util.List;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import org.apache.commons.lang3.Validate;
+
+public class NonNullList<E> extends AbstractList<E> {
+
+    private final net.yatopia.server.list.GlueList<E> a;
+    private final E b;
+
+    public static <E> NonNullList<E> a() {
+        return new NonNullList<>();
+    }
+
+    public static <E> NonNullList<E> a(int i, E e0) {
+        Validate.notNull(e0);
+        Object[] aobject = new Object[i];
+
+        Arrays.fill(aobject, e0);
+        return new NonNullList<>((List<E>) Arrays.asList(aobject), e0); // Yatopia - decompile fix
+    }
+
+    @SafeVarargs
+    public static <E> NonNullList<E> a(E e0, E... ae) {
+        return new NonNullList<>(Arrays.asList(ae), e0);
+    }
+
+    protected NonNullList() {
+        this(Lists.newArrayList(), null); // Yatopia - decompile fix
+    }
+
+    protected NonNullList(List<E> list, @Nullable E e0) {
+        this.a = new net.yatopia.server.list.GlueList<>(list);
+        this.b = e0;
+    }
+
+    @Nonnull
+    public E get(int i) {
+        return this.a.get(i);
+    }
+
+    public E set(int i, E e0) {
+        Validate.notNull(e0);
+        return this.a.set(i, e0);
+    }
+
+    public void add(int i, E e0) {
+        Validate.notNull(e0);
+        this.a.add(i, e0);
+    }
+
+    public E remove(int i) {
+        return this.a.remove(i);
+    }
+
+    public int size() {
+        return this.a.size();
+    }
+
+    public void clear() {
+        if (this.b == null) {
+            super.clear();
+        } else {
+            for (int i = 0; i < this.size(); ++i) {
+                this.set(i, this.b);
+            }
+        }
+
+    }
+}
diff --git a/src/main/java/net/minecraft/server/RecipeItemStack.java b/src/main/java/net/minecraft/server/RecipeItemStack.java
index 30da7471c3ecc66a61cb9fe1dd58d6d65438c505..27978f7b52c8db02f69fdcb092ffcce4550904d3 100644
--- a/src/main/java/net/minecraft/server/RecipeItemStack.java
+++ b/src/main/java/net/minecraft/server/RecipeItemStack.java
@@ -32,7 +32,7 @@ public final class RecipeItemStack implements Predicate<ItemStack> {
 
     public void buildChoices() {
         if (this.choices == null) {
-            List<ItemStack> list = new ArrayList<>();
+            List<ItemStack> list = new net.yatopia.server.list.GlueList<>(); // Yatopia
             Set<ItemStack> uniqueValues = new HashSet<>();
             for (Provider recipeitemstack_provider : this.b) {
                 for (ItemStack itemStack : recipeitemstack_provider.a()) {
