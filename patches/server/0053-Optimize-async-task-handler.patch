From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivan Pekov <ivan@mrivanplays.com>
Date: Tue, 22 Sep 2020 21:50:57 +0300
Subject: [PATCH] Optimize async task handler

Co-authored-by: ishland <ishlandmc@yeah.net>

diff --git a/src/main/java/net/minecraft/server/IAsyncTaskHandler.java b/src/main/java/net/minecraft/server/IAsyncTaskHandler.java
index 5df6be7e8d9b1295ed0700b3be90c3778fc7d77c..1868a8e4bdab8e1fccb04b703908b38d95fadea5 100644
--- a/src/main/java/net/minecraft/server/IAsyncTaskHandler.java
+++ b/src/main/java/net/minecraft/server/IAsyncTaskHandler.java
@@ -13,8 +13,9 @@ public abstract class IAsyncTaskHandler<R extends Runnable> implements Mailbox<R
 
     private final String b;
     private static final Logger LOGGER = LogManager.getLogger();
-    private final Queue<R> d = Queues.newConcurrentLinkedQueue();
+    private final java.util.concurrent.BlockingQueue<R> d = new java.util.concurrent.LinkedBlockingQueue<>(); // Yatopia
     private int e;
+    private final java.util.concurrent.locks.Lock executeLock = new java.util.concurrent.locks.ReentrantLock(); // Yatopia
 
     protected IAsyncTaskHandler(String s) {
         this.b = s;
@@ -79,7 +80,7 @@ public abstract class IAsyncTaskHandler<R extends Runnable> implements Mailbox<R
     public final void addTask(R r0) { a(r0); }; // Paper - OBFHELPER
     public void a(R r0) {
         this.d.add(r0);
-        LockSupport.unpark(this.getThread());
+        //LockSupport.unpark(this.getThread()); // Yatopia - remove this
     }
 
     public void execute(Runnable runnable) {
@@ -99,14 +100,14 @@ public abstract class IAsyncTaskHandler<R extends Runnable> implements Mailbox<R
     }
 
     protected boolean executeNext() {
-        R r0 = this.d.peek(); // Paper - decompile fix
+        R r0 = d.poll(); // Paper - decompile fix // Yatopia
 
         if (r0 == null) {
             return false;
         } else if (this.e == 0 && !this.canExecute(r0)) {
             return false;
         } else {
-            this.executeTask(this.d.remove()); // Paper - decompile fix
+            this.executeTask(r0); // Paper - decompile fix // Yatopia
             return true;
         }
     }
@@ -127,16 +128,21 @@ public abstract class IAsyncTaskHandler<R extends Runnable> implements Mailbox<R
     }
 
     protected void bl() {
+        /* // Yatopia - nuke this
         Thread.yield();
         LockSupport.parkNanos("waiting for tasks", 100000L);
+         */ // Yatopia
     }
 
     protected void executeTask(R r0) {
+        executeLock.lock(); // Yatopia
         try {
             r0.run();
         } catch (Exception exception) {
             if (exception.getCause() instanceof ThreadDeath) throw exception; // Paper
             IAsyncTaskHandler.LOGGER.fatal("Error executing task on {}", this.bi(), exception);
+        } finally { // Yatopia
+            executeLock.unlock(); // Yatopia
         }
 
     }
